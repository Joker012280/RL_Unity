//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Collections.Generic;
using System.Text;
using RosMessageGeneration;

namespace RosMessageTypes.Robotiq85
{
    public class GripperCmd : Message
    {
        public const string RosMessageName = "robotiq_85_msgs/GripperCmd";

        public bool emergency_release;
        public uint emergency_release_dir;
        public bool stop;
        public float position;
        public float speed;
        public float force;

        public GripperCmd()
        {
            this.emergency_release = false;
            this.emergency_release_dir = 0;
            this.stop = false;
            this.position = 0.0f;
            this.speed = 0.0f;
            this.force = 0.0f;
        }

        public GripperCmd(bool emergency_release, uint emergency_release_dir, bool stop, float position, float speed, float force)
        {
            this.emergency_release = emergency_release;
            this.emergency_release_dir = emergency_release_dir;
            this.stop = stop;
            this.position = position;
            this.speed = speed;
            this.force = force;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(BitConverter.GetBytes(this.emergency_release));
            listOfSerializations.Add(BitConverter.GetBytes(this.emergency_release_dir));
            listOfSerializations.Add(BitConverter.GetBytes(this.stop));
            listOfSerializations.Add(BitConverter.GetBytes(this.position));
            listOfSerializations.Add(BitConverter.GetBytes(this.speed));
            listOfSerializations.Add(BitConverter.GetBytes(this.force));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            this.emergency_release = BitConverter.ToBoolean(data, offset);
            offset += 1;
            this.emergency_release_dir = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.stop = BitConverter.ToBoolean(data, offset);
            offset += 1;
            this.position = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.speed = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.force = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

    }
}
